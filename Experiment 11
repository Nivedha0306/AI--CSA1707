from heapq import heappop, heappush
def astar(start, goal, grid):
    h = lambda a,b: abs(a[0]-b[0])+abs(a[1]-b[1])
    open, seen = [(0,start,[start])], set()
    while open:
        f,(x,y),path = heappop(open)
        if (x,y)==goal: return path
        if (x,y) in seen: continue
        seen.add((x,y))
        for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)]:
            nx,ny=x+dx,y+dy
            if 0<=nx<len(grid) and 0<=ny<len(grid[0]) and not grid[nx][ny]:
                heappush(open,(len(path)+h((nx,ny),goal),(nx,ny),path+[(nx,ny)]))

grid=[[0,0,0],[1,1,0],[0,0,0]]
print(astar((0,0),(2,2),grid))
